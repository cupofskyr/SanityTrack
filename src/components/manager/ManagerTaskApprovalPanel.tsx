
"use client";

import React, { useEffect, useState } from "react";
import {
  getFirestore,
  collection,
  query,
  where,
  onSnapshot,
  doc,
  updateDoc,
} from "firebase/firestore";
import { Button } from "../ui/button";
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from "../ui/dialog";
import { useToast } from "@/hooks/use-toast";
import { Check, X, UserPlus, Bot } from "lucide-react";
import { app } from "@/lib/firebase";

interface Task {
  id: string;
  title: string;
  description?: string;
  status: string;
  requiresApproval?: boolean;
  photoProofId?: string;
}

interface ManagerTaskApprovalPanelProps {
  isOpen: boolean;
  onOpenChange: (isOpen: boolean) => void;
  onAssign: (taskId: string) => void;
}

export default function ManagerTaskApprovalPanel({
  isOpen,
  onOpenChange,
  onAssign,
}: ManagerTaskApprovalPanelProps) {
  const [tasks, setTasks] = useState<Task[]>([]);
  const db = getFirestore(app);
  const { toast } = useToast();

  useEffect(() => {
    if (!isOpen) return;

    const q = query(
      collection(db, "tasks"),
      where("status", "==", "pending_approval")
    );

    const unsubscribe = onSnapshot(q, (snapshot) => {
      const data = snapshot.docs.map(
        (doc) => ({ id: doc.id, ...doc.data() } as Task)
      );
      setTasks(data);
    }, (error) => {
        console.error("Error fetching tasks: ", error);
        toast({variant: "destructive", title: "Error", description: "Could not fetch tasks for approval."})
    });

    return () => unsubscribe();
  }, [db, isOpen, toast]);

  async function handleApprove(taskId: string) {
    const taskRef = doc(db, "tasks", taskId);
    await updateDoc(taskRef, { status: "open", requiresApproval: false });
    toast({title: "Task Approved", description: "The task is now open and can be assigned."});
  }

  async function handleReject(taskId: string) {
    const taskRef = doc(db, "tasks", taskId);
    await updateDoc(taskRef, { status: "rejected", requiresApproval: false });
    toast({variant: "secondary", title: "Task Rejected"});
  }

  return (
    <Dialog open={isOpen} onOpenChange={onOpenChange}>
      <DialogContent className="max-w-3xl">
        <DialogHeader>
          <DialogTitle className="font-headline flex items-center gap-2">
            <Bot className="text-primary"/> Approve AI Suggested Tasks
          </DialogTitle>
          <DialogDescription>
            Review tasks that were automatically generated by the AI based on submissions. Approve them to add to the master task list.
          </DialogDescription>
        </DialogHeader>
        <div className="max-h-[60vh] overflow-y-auto pr-4 -mr-4 mt-4">
            {tasks.length === 0 ? (
            <p className="text-muted-foreground text-center py-8">No tasks are currently pending approval.</p>
            ) : (
                <ul className="space-y-4">
                    {tasks.map((task) => (
                    <li
                        key={task.id}
                        className="border rounded-lg p-4 flex flex-col md:flex-row md:items-center gap-4"
                    >
                        <div className="flex-1">
                            <h3 className="font-semibold">{task.title}</h3>
                            <p className="text-sm text-muted-foreground">{task.description}</p>
                        </div>
                        <div className="flex gap-2 shrink-0">
                            <Button onClick={() => handleApprove(task.id)} size="sm">
                                <Check /> Approve
                            </Button>
                            <Button onClick={() => handleReject(task.id)} variant="destructive" size="sm">
                                <X /> Reject
                            </Button>
                            <Button onClick={() => onAssign(task.id)} variant="secondary" size="sm">
                                <UserPlus /> Assign
                            </Button>
                        </div>
                    </li>
                    ))}
                </ul>
            )}
        </div>
      </DialogContent>
    </Dialog>
  );
}
